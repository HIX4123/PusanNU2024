// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/07/2024 19:39:15"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SRAMControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SRAMControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg chk;
reg clock;
reg [1:0] cnt;
reg reset;
reg sharp;
reg star;
// wires                                               
wire ce;
wire rw;

// assign statements (if any)                          
SRAMControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ce(ce),
	.chk(chk),
	.clock(clock),
	.cnt(cnt),
	.reset(reset),
	.rw(rw),
	.sharp(sharp),
	.star(star)
);
initial 
begin 
#1000000 $finish;
end 

// reset
initial
begin
	reset = 1'b1;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 

// chk
initial
begin
	chk = 1'b0;
	chk = #80000 1'b1;
	chk = #30000 1'b0;
	chk = #30000 1'b1;
	chk = #30000 1'b0;
	chk = #30000 1'b1;
	chk = #30000 1'b0;
	chk = #30000 1'b1;
	chk = #30000 1'b0;
end 
// cnt[ 1 ]
initial
begin
	cnt[1] = 1'b0;
	cnt[1] = #200000 1'b1;
	cnt[1] = #120000 1'b0;
end 
// cnt[ 0 ]
initial
begin
	cnt[0] = 1'b0;
	cnt[0] = #140000 1'b1;
	cnt[0] = #60000 1'b0;
	cnt[0] = #60000 1'b1;
	cnt[0] = #60000 1'b0;
end 

// sharp
initial
begin
	sharp = 1'b0;
	sharp = #320000 1'b1;
	sharp = #30000 1'b0;
end 

// star
initial
begin
	star = 1'b0;
	star = #20000 1'b1;
	star = #30000 1'b0;
end 
endmodule

